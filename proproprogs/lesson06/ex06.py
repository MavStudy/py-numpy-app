# NumPy - Объединение и разделение массивов
import numpy as np


def main():
    # Еще один способ объединения и создания массивов – это использование
    # специальных объектов r_ и c_. Например, объект r_ создает копии массивов,
    # следующими способами:
    a = np.array([1, 2, 3])
    print(
        "массив a",
        id(a),
        a.shape
    )
    print(a)

    print('-' * 70)

    a1 = np.r_[a, 4, 5]  # список + дополнительные элементы
    print(
        "массив a1",
        id(a1),
        a1.shape
    )
    print(a1)

    print('-' * 70)

    a2 = np.r_[1:9, 90, 100]  # срез + два элемента
    print(
        "массив a2",
        id(a2),
        a2.shape
    )
    print(a2)

    print('-' * 70)

    a3 = np.r_[np.array([1, 2, 3]), np.array([4, 5, 6])]  # объединение
    # двух массивов
    print(
        "массив a3",
        id(a3),
        a3.shape
    )
    print(a3)

    print('-' * 70)

    a4 = np.r_[[(1, 2, 3), (4, 5, 6)], [(7, 8, 9)]]  # объединение двумерного
    # и одномерного списков
    print(
        "массив a4",
        id(a4),
        a4.shape
    )
    print(a4)

    print('-' * 70)

    # По аналогии работает и второй объект c_, только объединение выполняется
    # по второй оси axis1:
    b1 = np.c_[1:5]
    print(
        "массив b1",
        id(b1),
        b1.shape
    )
    print(b1)

    print('-' * 70)

    b2 = np.c_[[1, 2, 3], [4, 5, 6]]
    print(
        "массив b2",
        id(b2),
        b2.shape
    )
    print(b2)

    print('-' * 70)

    b3 = np.c_[[(1, 2, 3), (4, 5, 6)], [[7], [8]]]
    print(
        "массив b3",
        id(b3),
        b3.shape
    )
    print(b3)

    print('-' * 70)


if __name__ == '__main__':
    main()
