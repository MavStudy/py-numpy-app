import numpy as np


def main():
    # Следующий набор функций используются для формирования треугольных матриц.
    a = np.tri(4)  # треугольная матрица 4х4
    print(a, a.dtype)
    # [[1. 0. 0. 0.]
    #  [1. 1. 0. 0.]
    #  [1. 1. 1. 0.]
    #  [1. 1. 1. 1.]] float64

    print('-' * 30)

    b = np.tri(4, 2)  # треугольная матрица 4х2
    print(b, b.dtype)
    # [[1. 0.]
    #  [1. 1.]
    #  [1. 1.]
    #  [1. 1.]] float64

    print('-' * 30)

    # Если нужно привести уже существующие матрицы к треугольному виду, то это
    # можно сделать так:
    c1 = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)])
    print(c1, c1.dtype)
    # [[1 2 3]
    #  [4 5 6]
    #  [7 8 9]] int32

    c2 = np.tril(c1)  # нижняя треугольная матрица размером 3х3
    print(c2, c2.dtype)
    # [[1 0 0]
    #  [4 5 0]
    #  [7 8 9]] int32

    print('-' * 30)

    c3 = np.triu(c1)  # верхняя треугольная матрица размером 3х3
    print(c3, c3.dtype)
    # [[1 2 3]
    #  [0 5 6]
    #  [0 0 9]] int32

    print('-' * 30)

    # Если указать одномерный список
    d = np.tril([1, 2, 3])  # то будет создана треугольная матрица 3х3 из
    # строк [1, 2, 3].
    print(d, d.dtype)
    # [[1 0 0]
    #  [1 2 0]
    #  [1 2 3]] int32

    print('-' * 30)

    # Также функции tril и triu будут работать и с многомерными массивами:
    e = np.tril([[[1, 2, 3], [4, 5, 6], [7, 8, 9]]])
    print(e, e.dtype)

    print('-' * 30)

    f = np.tril([
        [
            [1, 2, 3], [4, 5, 6], [7, 8, 9]
        ],
        [
            [10, 20, 30], [40, 50, 60], [70, 80, 90]
         ],
        [
            [100, 200, 300], [400, 500, 600], [700, 800, 900]
        ]
    ])
    print(f, f.dtype)
    # [[[  1   0   0]
    #   [  4   5   0]
    #   [  7   8   9]]
    #
    #  [[ 10   0   0]
    #   [ 40  50   0]
    #   [ 70  80  90]]
    #
    #  [[100   0   0]
    #   [400 500   0]
    #   [700 800 900]]] int32

    print('-' * 30)

    # Последняя функция этойгруппы формирует матрицу Вандермонда из одномерных
    # списков или массивов
    g = np.vander([1, 2, 3])  # матрица Вандермонда 3х3
    print(g, g.dtype)
    # [[1 1 1]
    #  [4 2 1]
    #  [9 3 1]] int32


if __name__ == '__main__':
    main()
