# NumPy - Базовые математические функции
import numpy as np


def separator(sep='-'):
    print(sep * 70)


def array_info(name, arr):
    print(
        f"массив {name}:",
        type(arr),
        id(arr),
        arr.shape
    )


def main():
    # Функции генерации псевдослучайных чисел
    # ------------------------------------------------------------------------
    #  Название             | Описание
    # ------------------------------------------------------------------------
    #  np.random.rand()     | Генерация чисел с равномерным законом
    #                       | распределения
    # ------------------------------------------------------------------------
    #  np.random.randint()  | Генерация целых чисел с равномерным законом
    #                       | распределения
    # ------------------------------------------------------------------------
    #  np.random.randn()    | Генерация нормальных случайных значений
    # ------------------------------------------------------------------------
    #  np.random.seed()     | Установка начального состояния генератора
    # ------------------------------------------------------------------------

    # Во многих программах требуется генерировать случайные значения и в NumPy
    # для этого имеется специальный модуль random с богатым функционалом.
    # Конечно, совершенно случайные величины получить невозможно, поэтому
    # придумываются различные «хитрости» для их генерации и правильнее их
    # называть – псевдослучанйыми числами.

    # В самом простом случае, функция rand() позволяет получать
    # случайные числа в диапазоне от 0 до 1:
    print(np.random.rand())  # вещественное случайное число от 0 до 1
    separator()

    # Если требуется получить массив из таких чисел, то можно указать это
    # через первый аргумент:
    print(np.random.rand(5))  # массив из пяти чисел
    separator()

    # Для получения двумерных массивов – два аргумента:
    print(np.random.rand(2, 3))  # массив 2х3

    # И так далее. Можно создавать любые многомерные массивы
    # из случайных величин.
    separator()

    # Если требуется генерировать целые случайные значения, то используется
    # функция randint():
    print(np.random.randint(10))  # генерация целого числа  в диапазне [0; 10)
    separator()

    print(np.random.randint(5, 10))  # генерация целого числа
    # в диапазоне [5; 10)
    separator()

    # Для получения массива из таких случайных чисел дополнительно следует
    # указать параметр size, следующим образом:
    print(np.random.randint(5, size=4))
    separator()

    print(np.random.randint(1, 10, size=(2, 5)))  # матрица 2х5
    separator()

    # Функции rand() и randint() генерируют числа с равномерным законом
    # распределения. Если нужно получать значения с другими широко известными
    # распределениями, то используются функции:
    print(np.random.randn())  # нормальная СВ с нулевым средним и единичной
    # дисперсией
    separator()
    print(np.random.randn(5))  # массив из пяти нормальных СВ
    separator()
    print(np.random.randn(2, 3))  # матрица 2х3 из нормальных СВ
    separator()
    print(np.random.pareto(2.0, size=3))  # распределение Паретто с
    # параметром 2,0
    separator()
    print(np.random.beta(0.1, 0.3, size=(3, 3)))  # бета-распределение с
    # параметрами 0,1 и 0,3

    # Существуют и другие функции для генерации самых разных распределений.
    # Документацию по ним можно посмотреть на официальном сайте пакета NumPy:
    #
    # https://numpy.org/doc/stable/

    # По умолчанию, все рассмотренные функции при каждом новом запуске
    # генерируют разные числа. Однако, иногда требуются одни и те же их
    # реализации. Например, такой подход часто используется для сохранения
    # начальных случайных значений весов в нейронных сетях. Для этого
    # устанавливают некое начальное значение зерна (seed):

    np.random.seed(13)  # начальное значение генератора случайных чисел

    # и все последующие запуски будут давать одну и ту же последовательность
    # чисел, например:
    print(np.random.randint(10, size=10))  # [2 0 0 6 2 4 9 3 4 2]

    # Причем, у вас должны получиться такие же числа. Если запустим
    # эту функцию еще раз, то будут получены следующие 10 случайных чисел:
    print(np.random.randint(10, size=10))  # [6 5 9 4 2 0 3 5 3 6]

    # Но, установив зерно снова в значение, например, 13:
    np.random.seed(13)

    # числа начнут повторяться:
    print(np.random.randint(10, size=10))  # [2 0 0 6 2 4 9 3 4 2]
    print(np.random.randint(10, size=10))  # [6 5 9 4 2 0 3 5 3 6]




if __name__ == '__main__':
    main()
