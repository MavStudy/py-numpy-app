# NumPy - Произведение матриц и векторов, элементы линейной алгебры
import numpy as np


def separator(sep='-'):
    print(sep * 70)


def array_info(name, arr):
    print(
        f"массив {name}:",
        type(arr),
        id(arr),
        arr.shape
    )


def main():
    # Элементы линейной алгебры
    #
    # Из высшей математики хорошо известно, что матрицы можно использовать
    # для решения систем линейных уравнений. Для этого в NumPy существует
    # модуль linalg. Давайте рассмотрим некоторые из его функций.

    # Предположим, имеется квадратная матрица 3x3:
    a = np.array([(1, 2, 3), (1, 4, 9), (1, 8, 27)])
    array_info('a', a)
    print(a)
    # массив a: <class 'numpy.ndarray'> 1813024005680 (3, 3)
    # [[ 1  2  3]
    #  [ 1  4  9]
    #  [ 1  8 27]]

    separator()

    # Первым делом вычислим ранг этой матрицы, чтобы быть уверенным,
    # что она состоит из линейно независимых строк и столбцов:
    print(np.linalg.matrix_rank(a))  # раг равен 3
    # 3

    separator()

    # Если ранг матрицы совпадает с ее размерностью, значит, она способна
    # описывать систему из трех независимых линейных уравнений. В нашем случае,
    # система уравнений будет иметь вид:

    # Система_из_трёх_независимых_линейных_уравнений.png

    y = np.array([10, 20, 30])
    array_info('y', y)
    print(y)
    # массив y: <class 'numpy.ndarray'> 2085868936848 (3,)
    # [10 20 30]

    separator()

    # Тогда корни уравнения можно вычислить с помощью функции solve:

    result1 = np.linalg.solve(a, y)
    array_info('result1', result1)
    print(result1)
    # массив result1: <class 'numpy.ndarray'> 2085868937136 (3,)
    # [-5.         10.         -1.66666667]

    separator()

    # Другой способ решения этой же системы линейных уравнений возможен
    # через вычисление обратной матрицы.
    #
    # Способ_решения_через_вычисление_обратной_матрицы.png

    # На уровне пакета NumPy это делается так:
    invA = np.linalg.inv(a)  # вычисление обратной матрицы
    result2 = invA @ y  # вычисление корней
    array_info('result2', result2)
    print(result2)
    # массив result2: <class 'numpy.ndarray'> 1823243591600 (3,)
    # [-5.         10.         -1.66666667]

    separator()

    # Конечно, здесь представили лишь примеры использования модуля linalg.
    # Приводить все функции нет смысла, так как они имеют довольно
    # специализированное назначение и специалисты в своих областях без труда
    # смогут ими воспользоваться. Для полноты картины приведём список наиболее
    # характерных функций, чтобы вы знали возможности расширения linalg.
    #
    # Наиболее_характерные_функции_модуля_linalg.png

    # -------------------------------------------------------------------------
    #  Функция              | Описание
    # -------------------------------------------------------------------------
    #  linalg.cholesky()    | Разложение Холецкого
    # -------------------------------------------------------------------------
    #  linalg.qr()          | QR-азложение матрицы
    # -------------------------------------------------------------------------
    #  linalg.svd()         | Сингулярное (SVD) разложение матрицы
    # -------------------------------------------------------------------------
    #  linalg.norm()        | Норма матрицы или вектора
    # -------------------------------------------------------------------------
    #  linalg.cond()        | Число обусловленности матрицы
    # -------------------------------------------------------------------------
    #  linalg.det()         | Определитель (детерминант) матрицы
    # -------------------------------------------------------------------------
    #  linalg.matrix_rank() | Вычисление ранга матрицы по алгоритму SVD
    # -------------------------------------------------------------------------
    #  np.trace()           | Сумма диагональных элементов массива
    # -------------------------------------------------------------------------
    #  linalg.eig()         | Вычисление собственных значений и правых
    #                       | собственных векторов
    # -------------------------------------------------------------------------
    #  linalg.eigvals()     | Вычисление собственных значений матрицы
    # -------------------------------------------------------------------------
    #  linalg.solve()       | Решение линейного матричного уравнения
    # -------------------------------------------------------------------------
    #  linalg.tensorsolve() | Решение линейного тензорного уравнения
    # -------------------------------------------------------------------------
    #  linalg.lstsq()       | Решает задачу поиска наименьших квадратов
    #                       | для линейного матричного уравнения
    # -------------------------------------------------------------------------
    #  linalg.inv()         | Вычисление обратной матрицы
    # -------------------------------------------------------------------------
    #  linalg.pinv()        | Вычисление псевдообратной (Мура-Пенроуза) матрицы
    # -------------------------------------------------------------------------
    #  linalg.tensorinv()   | Вычисление обратного тензора (N-мерного массива)
    # -------------------------------------------------------------------------

    # Конечно, это не все математические функции пакета NumPy. Полное описание
    # смотрите на сайте с официальной документацией:
    #
    # https://numpy.org/doc/stable/


if __name__ == '__main__':
    main()
