# NumPy - Булевы операции и функции, значения inf и nan

import numpy as np


def separator(sep='-'):
    print(sep * 70)


def array_info(name, arr):
    print(
        f"массив {name}:",
        type(arr),
        id(arr),
        arr.shape
    )


def main():
    # Продолжаем знакомство с операциями над массивами и посмотрим как они
    # ведут себя с булевыми операциями. Предположим, имеется одномерный массив:
    a = np.array([1, 2, 3, 10, 20, 30])
    array_info('a', a)
    print(a)
    # массив a: <class 'numpy.ndarray'> 39301840 (6,)
    # [ 1  2  3 10 20 30]
    separator()

    # и мы хотим определить все числа, которые больше 5. Мы с вами уже
    # выполняли такую операцию и для этого сначала формировали булевый массив,
    # а затем, выделяли элементы, у индексов которых стоит значение True:
    indx = a > 5
    a1 = a[indx]
    array_info('a1', a1)
    print(a1)
    separator()
    # массив a1: <class 'numpy.ndarray'> 42032176 (3,)
    # [10 20 30]

    # Видите, как это может быть удобно: выделить нужные элементы, не используя
    # ни одного оператора цикла языка Python. А, значит, такая конструкция
    # будет работать достаточно быстро (так как внутри реализована на языках Си
    # и Fortran).

    # Конечно, эту запись можно еще упростить и записать в виде:
    # a[a > 5]
    # Результат будет тем же.

    # По аналогии работают и другие булевы операторы:
    # ------------------------------------------------------------------------
    # Оператор   | Описание
    # ------------------------------------------------------------------------
    #  a == b    | Проверка на равенство
    # ------------------------------------------------------------------------
    #  a != b    | Проверка на неравенство
    # ------------------------------------------------------------------------
    #   a > b    | Проверка, что a больше b
    # ------------------------------------------------------------------------
    #   a < b    | Проверка, что a меньше b
    # ------------------------------------------------------------------------
    #   a >= b   | Проверка, что a больше или равно b
    # ------------------------------------------------------------------------
    #   a <= b   | Проверка, что a меньше или равно b
    # ------------------------------------------------------------------------

    # Здесь в качестве операндов a и b могут выступать как числа,
    # так и массивы NumPy.
    
    # Например, добавим еще один массив:
    b = np.array([1, 2, 3, 4, 5, 6])
    array_info('b', b)
    print(b)
    separator()

    # Тогда можно использовать сравнения:
    print(f"a == b:", a == b)
    # a == b: [ True  True  True False False False]

    print(f"a >= b:", a >= b)
    # [ True  True  True False False False]

    print(f"a <= b:", a <= b)
    # a <= b: [ True  True  True False False False]

    print(f"a != b", a != b)
    # a != b [False False False  True  True  True]
    separator()

    # Функции greater, less, equal
    # Вместо записи операторов в NumPy имеются функции сравнения:
    # greater(), less() и equal(). Их названия говорят сами за себя:
    #
    # greater(a, b) – выполняет сравнение a > b;
    # less(a, b) – выполняет сравнение a < b;
    # equal(a, b) – выполняет сравнение a == b.

    result1 = np.greater(a, b)
    array_info('result1', result1)
    print(result1)
    separator()

    result2 = np.less(a, b)
    array_info('result2', result2)
    print(result2)
    separator()

    result3 = np.equal(a, b)
    array_info('result3', result3)
    print(result3)
    separator()

    # Но, чаще всего на практике вместо них записывают
    # булевы операторы: >, <, ==.


if __name__ == '__main__':
    main()
