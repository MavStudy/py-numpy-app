# Изменение формы массивов, добавление и удаление осей
import numpy as np


def main():
    # Изменение размерности массивов
    a = np.arange(10)  # [0 1 2 3 4 5 6 7 8 9]
    print("a - первоначальное представление массива", id(a), a.shape)
    print(a)

    print('-' * 70)

    # Мы уже знаем, что для изменения формы этого массива, достаточно указать
    # свойству shape кортеж с новыми размерами, например, так:
    a.shape = 2, 5  # массив размерностью 2x5
    print("a - изменённое представление массива:", id(a), a.shape)
    print(a)

    print('-' * 70)

    # В результате изменится представление массива, на которое ссылается
    # переменная a. Если же требуется создать новое представление массива,
    # сохранив прежнее, то следует воспользоваться методом reshape():
    b = a.reshape(10)
    print("b - новое представление массива", id(b), b.shape)
    print(b)

    print('-' * 70)

    # И, как мы с вами говорили на предыдущем занятии, ссылки b и a будут
    # использовать одни и те же данные, то есть, изменение массива через b:
    b[0] = -1  # приведет к изменению соответствующего элемента массива a

    print("a - представление массива:", id(a), a.shape)
    print(a)

    print("b - представление массива", id(b), b.shape)
    print(b)

    # a.shape = 3, 3
    # File "...\ex01.py", line 42, in main
    #     a.shape = 3, 3
    # ValueError: cannot reshape array of size 10 into shape (3,3)
    #
    # приведет к ошибке, т.к. размерность 3x3 = 9 элементов, а в массиве
    # 10 элементов. Здесь всегда должно выполняться равенство:
    #
    # n1 x n2 x … x nN = число элементов массива

    # Но допускается делать так:
    a.shape = -1, 2  # размерность 5х2
    # Отрицательное значение -1 означает автоматическое вычисление размерности
    # по первой оси. По второй берется значение 2. В этом случае получим
    # размерность 5x2.
    print('-' * 70)

    print("a - представление массива:", id(a), a.shape)
    print(a)


if __name__ == '__main__':
    main()
