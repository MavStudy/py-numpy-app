# Изменение формы массивов, добавление и удаление осей
import numpy as np


def main():
    # Изменение размерности массивов
    a = np.arange(10)  # [0 1 2 3 4 5 6 7 8 9]
    print("a - первоначальное представление массива", id(a), a.shape)
    print(a)

    print('-' * 70)

    # Отрицательное значение -1 означает автоматическое вычисление размерности
    # по оси. То же самое можно делать и в методе reshape()
    print('-' * 70)

    b_shape_str = "b - представление массива:"

    b = a.reshape(-1, 1)  # размерность 10х1
    print(b_shape_str, id(b), b.shape)
    print(b)

    print('-' * 70)

    b.reshape(1, -1)  # размерность 1х10
    print(b_shape_str, id(b), b.shape)
    print(b)
    # Обратите внимание, в последних двух случаях мы получаем представления
    # двумерных массивов, преобразуя одномерный. Это важный момент, так как на
    # выходе метода reshape() получается матрица с двумя осями (строки и
    # столбцы), тогда как изначально массив b имел только одну ось. Не случайно
    # последнее представление отображается с двумя квадратными скобками.
    #
    # Первая скобка – это первая ось (строка), а вторая скобка (вторая ось)
    # описывает столбцы. Одномерный же массив b отображается с одной квадратной
    # скобкой.

    # Если нам требуется многомерный массив преобразовать в обычный одномерный,
    # то можно воспользоваться методом ravel(), который возвращает новое
    # представление, не меняя текущего:
    c = b.ravel()  # с ссылается на одномерное представление массива

    print('-' * 70)

    print("c - представление массива:", id(c), c.shape)
    print(c)

    # Если же нам нужно текущий массив преобразовать в одномерный, то это можно
    # сделать так:

    b.shape = -1

    print('-' * 70)

    print(b_shape_str, id(b), b.shape)
    print(b)


if __name__ == '__main__':
    main()
