# NumPy - Индексация, срезы, итерирование массивов
import numpy as np


def separator(sep='-'):
    print(sep * 70)


def array_info(name, arr):
    print(
        f"массив {name}:",
        type(arr),
        id(arr),
        arr.shape
    )


def main():
    # Изменение массивов через списочную индексацию
    #
    # С помощью списков можно не только создавать новые массивы, но и менять
    # значения в исходном. Например, возьмем одномерный массив:
    a = np.arange(7)  # array([0, 1, 2, 3, 4, 5, 6])
    array_info('a', a)
    print(a)
    # массив a: <class 'numpy.ndarray'> 39170384 (7,)
    # [0 1 2 3 4 5 6]

    separator()

    # и изменим его следующие элементы:
    a[[0, 4, 6]] = [-1, -2, -3]
    array_info('a', a)
    print(a)
    # массив a: <class 'numpy.ndarray'> 39105232 (7,)
    # [-1  1  2  3 -2  5 -3]
    #
    # Смотрите, как это удобно. Мы сразу списком индексов обозначаем изменяемые
    # элементы и присваиваем им соответствующие новые значения.

    separator()

    # Если в списке индексов имеются повторы, то новое значение будет
    # соответствовать последнему значению:
    a[[0, 0, 0, 1]] = [1, 2, 3, 100]
    array_info('a', a)
    print(a)
    # массив a: <class 'numpy.ndarray'> 39563600 (7,)
    # [  3 100   2   3  -2   5  -3]
    #
    # Здесь в первый элемент (с индексом 0), в итоге, запишется число 3

    separator()

    # Или можно выполнить вот такую операцию:
    a[[0, 0, 0]] = a[[0, 0, 0]] + 3
    # Здесь сначала будет выполнена операция списочного индексирования
    # a[[0, 0, 0]], а уже потом добавлено значение 3. То есть, это запись
    # эквивалентна следующей:
    #
    # a[0] = a[0] + 3
    array_info('a', a)
    print(a)
    # массив a: <class 'numpy.ndarray'> 39301840 (7,)
    # [  6 100   2   3  -2   5  -3]

    separator()

    # Аналогично все выполняется и при такой команде:
    a[[0, 0, 1, 2]] += 1
    array_info('a', a)
    print(a)
    # массив a: <class 'numpy.ndarray'> 39432912 (7,)
    # [  7 101   3   3  -2   5  -3]

    # Она эквивалента записи:
    #
    # a[[0, 1, 2]] += 1 # array([  7, 101,   3,   3,  -2,   5,  -3])
    #
    # Соответственно, элементам с индексами 0, 1 и 2 будет прибавлена 1. Вот
    # этот момент следует иметь в виду при работе с массивами NumPy.

    separator()

    # Те же самые математические операции и операции присваивания можно
    # выполнять и с многомерными массивами. Работает все аналогичным образом.
    # Вот так вот работают индексы, срезы и списочное индексирование
    # в пакете NumPy.


if __name__ == '__main__':
    main()
