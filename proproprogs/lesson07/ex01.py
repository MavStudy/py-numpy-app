# NumPy - Индексация, срезы, итерирование массивов
import numpy as np


def separator(sep='-'):
    print(sep * 70)


def main():
    # На этом занятии познакомимся со способами считывания и записи значений
    # в массивы NumPy. В целом синтаксис очень похож на обращение к элементам
    # списков языка Python. Давайте рассмотрим все на конкретных примерах.
    #  Предположим, что имеется одномерный массив:
    a = np.arange(12)
    print(
        "массив a:",
        type(a),
        id(a),
        a.shape
    )
    print(a)

    separator()

    print(f'{a[2]=}')  # увидим значение 2
    print(f'{a[-1]=}')  # последнее значение 11
    print(f'{a[-2]=}')  # предпоследнее значение 10

    # Если мы выходит за пределы массива и указываем несуществующий индекс,
    # то возникает исключение (ошибка):
    # a[12]  # ошибка, последний индекс 11
    # IndexError: index 12 is out of bounds for axis 0 with size 12

    # Соответственно, если нужно изменить значение какого-либо элемента,
    # то ему просто присваивается это новое значение:
    a[0] = 100  # первый элемент равен 100
    print(f'{a[0]=}')

    # Как видите, здесь применяется тот же синтаксис, что и при работе
    # с обычными списками Python. То же касается и срезов. Мы можем выделять
    # и менять сразу группу элементов массива. Общий синтаксис срезов выглядит
    # так:
    #
    # <имя массива>[start:stop:step]
    #
    # Давайте посмотрим примеры использования этой конструкции:
    b = a[2:4]  # Здесь указан начальный индекс 2, конечный индекс 4 и по
    # умолчанию берется шаг, равный 1. На выходе получаем массив из двух
    # значений 2 и 3. Последний граничный индекс 4 не включается в срез.

    print(
        "массив b:",
        type(b),
        id(b),
        b.shape
    )
    print(b)

    separator()

    # Обратите внимание, в NumPy срезы возвращают новое представление того же
    # самого массива, то есть, данные, на которые ссылаются переменные a и b
    # одни и те же. Мы в этом можем легко убедиться, выполнив вот такую строчку:
    b[0] = -100  # и это приводит к изменению соответствующего элемента
    # массива a.

    separator()
    print(
        "массив a:",
        type(a),
        id(a),
        a.shape
    )
    print(a)
    separator()
    print(
        "массив b:",
        type(b),
        id(b),
        b.shape
    )
    print(b)
    separator()

    # Поэтому срезы – это не копии массивов, а лишь создание их нового
    # представления!!! Это сделано специально для экономии памяти.

    # Другие примеры срезов:
    a1 = a[3:]
    print(
        "массив a1:",
        type(a1),
        id(a1),
        a1.shape
    )
    print(a1)
    # массив a1: <class 'numpy.ndarray'> 2803944463728 (9,)
    # [ 3  4  5  6  7  8  9 10 11]

    separator()

    a2 = a[:5]
    print(
        "массив a2:",
        type(a2),
        id(a2),
        a2.shape
    )
    print(a2)
    # массив a2: <class 'numpy.ndarray'> 2077267926576 (5,)
    # [ 100    1 -100    3    4]

    separator()

    a3 = a[-5:-1]
    print(
        "массив a3:",
        type(a3),
        id(a3),
        a3.shape
    )
    print(a3)
    # массив a3: <class 'numpy.ndarray'> 1314557877616 (4,)
    # [ 7  8  9 10]

    separator()

    a4 = a[:]
    print(
        "массив a4:",
        type(a4),
        id(a4),
        a4.shape
    )
    print(a4)
    # массив a4: <class 'numpy.ndarray'> 2073278307792 (12,)
    # [ 100    1 -100    3    4    5    6    7    8    9   10   11]

    separator()

    a5 = a[1:6:2]
    print(
        "массив a5:",
        type(a5),
        id(a5),
        a5.shape
    )
    print(a5)
    # массив a5: <class 'numpy.ndarray'> 3102767996368 (3,)
    # [1 3 5]

    separator()

    a6 = a[::2]
    print(
        "массив a6:",
        type(a6),
        id(a6),
        a6.shape
    )
    print(a6)
    # массив a6: <class 'numpy.ndarray'> 2285989158256 (6,)
    # [ 100 -100    4    6    8   10]

    separator()

    a7 = a[::-1]
    print(
        "массив a7:",
        type(a7),
        id(a7),
        a7.shape
    )
    print(a7)
    # массив a7: <class 'numpy.ndarray'> 2662871948656 (12,)
    # [  11   10    9    8    7    6    5    4    3 -100    1  100]

    separator()

    # Элементы массива NumPy можно перебирать с помощью цикла for, так как
    # массивы – итерируемые объекты. Например:
    print(
        "массив a:",
        type(a),
        id(a),
        a.shape
    )
    for x in a:
        print(x, sep=' ', end=' ')


if __name__ == '__main__':
    main()
